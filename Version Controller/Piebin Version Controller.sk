#
#     __________________________________________________________
#    / /                                                   / /\ \
#    \_\___________________________________________________\_\/ /
#        / /    _____    __            __                    / /
#       / /    / ____\  / /           /_/          /\       / /
#      / /    / /__    / /___  ___   __  ______ __/ /_     / /
#     / /     \___ \  /   __/ / __\ / / / __  //_  __/    / /
#    / /     ____/ / / /\ \  / /   / / / /_/ /  / /      / /
#   / /     \_____/ /_/ /_/ /_/   /_/ / ____/  /_/      / /__
#  / /    ========================== / / ==========    / / \ \
# | |                               /_/               | |   | |
#  \_\_________________________________________________\_\_/_/
#
#
#	Naver : baebine@naver.com
#	Github : https://github.com/Baebin
#
#	저작권은 PieBin에게 있으며 개발자의 동의없이 상업적인 용도로 이용 및 무단 배포하는 행위를 금지합니다.
#

#
# Environment:
#	- Skript 2.6
#	- SkQuery 4.1.5
#	- skript-reflect 2.3
#	- skUtilities 0.9.2
#


options:
	P: &c[ &ePieBin &c]&f

	Api: https://raw.githubusercontent.com/baebin/skript/main/
	Path.Skript: plugins\Skript\scripts\

	Code.Secret: PiebinVersionController
	Code.Encoding: utf-8

variables:
	{piebin::version controller} = 1.0

import:
	java.net.URL
	java.lang.System
	java.io.BufferedReader
	java.io.InputStreamReader
	java.io.FileOutputStream
	java.io.OutputStreamWriter


# = = = = = System Functions = = = = =

function vc_getCmdInfo() :: texts:
	add "{@P} /vc 목록" to {_i::*}
	add "{@P} /vc 리로드" to {_i::*}
	return {_i::*}

function vc_reload():
	set {_start} to now

	loop {piebin::*}:
		set {_system::%loop-index%} to loop-value
	clear {piebin::*}

	loop files in dir "{@Path.Skript}":
		set {_data::*} to loop-value split by "{@Path.Skript}"
		set {_file} to {_data::2}
		{_file} contains "Piebin"
		if {_file} contains "-Piebin":
			continue
		if {_file} contains "Version Controller":
			continue
		reload skript file {_file}
		replace "Piebin " and "-Piebin " with "" in {_file}
		add {_file} to {_system.complete::*}
	loop {_system::*}:
		if {_system.complete::*} contains loop-index:
			continue
		if vc_isExist(loop-index) is false:
			clear {_system::%loop-index%}
			continue
		if vc_isLoaded(loop-index) is false:
			continue
		if loop-index is "Version Controller":
			continue
		reload skript {_sk}
	loop {_system::*}:
		set {piebin::%loop-index%} to loop-value
	broadcast "{@P} &aVersion Controller System Reloaded &7- &b%difference between {_start} and now%"


# = = = = = Util Functions = = = = =

function vc_getName(system: text) :: text:
	set {_system} to {_system} in lower case
	set {_system} to {_system} in pascal case
	return {_system}

function vc_getPath(system: text) :: text:
	set {_system} to vc_getName({_system})
	return "{@Path.Skript}Piebin %{_system}%.sk"

function vc_getSystems() :: texts:
	set {_data} to text from url "{@Api}Version%%20Control"
	replace ", " with "," in {_data}
	set {_datas::*} to {_data} split by ","
	loop {_datas::*}:
		set {_s::*} to loop-value split by ":"
		add {_s::1} to {_system::*}
	return {_system::*}

function vc_getVersion(system: text) :: num:
	set {_data} to text from url "{@Api}Version%%20Control"
	replace ", " with "," in {_data}
	replace ": " with ":" in {_data}
	set {_datas::*} to {_data} split by ","
	loop {_datas::*}:
		set {_s::*} to loop-value split by ":"
		{_s::1} is {_system}
		return {_s::2} parsed as number
	return 1.0

function vc_getCurrentVersion(system: text) :: num:
	return {piebin::%{_system}%} + 0

function vc_getVersionToString(system: text) :: text:
	set {_ver} to vc_getVersion({_system})
	if mod(floor({_ver} * 10), 10) is 0:
		return "%{_ver}%.0"
	return "%{_ver}%"

function vc_getCurrentVersionToString(system: text) :: text:
	set {_ver} to vc_getCurrentVersion({_system})
	if mod(floor({_ver} * 10), 10) is 0:
		return "%{_ver}%.0"
	return "%{_ver}%"

function vc_isExist(system: text) :: boolean:
	set {_system} to vc_getName({_system})
	if file vc_getPath({_system}) exists:
		return true
	if file "{@Path.Skript}-Piebin %{_system}%.sk" exists:
		return true
	return false

function vc_isLoaded(system: text) :: boolean:
	set {_system} to vc_getName({_system})
	if file vc_getPath({_system}) exists:
		return true
	return false

function vc_isEdited(system: text) :: boolean:
	set {_system} to vc_getName({_system})
	if vc_getCurrentVersion({_system}) isn't 0:
		vc_isExist({_system}) is false
		return true
	return false


# = = = = = File Functions = = = = =

function vc_getFile(system: text) :: texts:
	set {_system} to vc_getName({_system})
	set {_system.url} to {_system}

	replace " " with "%%20" in {_system.url}
	# 아래 코드로 파싱시 불러오는 과정에서 한글이 깨지는 오류 발생
	# set {_data} to text from url "{@Api}%{_system}%/Piebin%%20%{_system.url}%.sk"
	
	set {_url} to new URL("{@Api}%{_system.url}%/Piebin%%20%{_system.url}%.sk")
	set {_stream.input} to new InputStreamReader({_url}.openStream(), "{@Code.Encoding}")
	set {_stream.buffer} to new BufferedReader({_stream.input})

	while true is true:
		set {_line} to {_stream.buffer}.readLine()
		if {_line} isn't set:
			stop loop
		add {_line} to {_line::*}
	{_stream.input}.close()
	{_stream.buffer}.close()

	return {_line::*}

function vc_createFile(system: text):
	vc_isExist({_system}) is false
	set {_system} to vc_getName({_system})

	create file vc_getPath({_system})

function vc_downloadFile(system: text):
	vc_isExist({_system}) is false
	set {_start} to now
	set {_system} to vc_getName({_system})
	set {_path} to vc_getPath({_system})

	vc_createFile({_system})
	set {_code::*} to vc_getFile({_system})

	set {_stream.file} to new FileOutputStream({_path})
	set {_writer.buffer} to new OutputStreamWriter({_stream.file}, "{@Code.Encoding}")

	set {_code::*} to vc_getFile({_system})
	loop {_code::*}:
		add 1 to {_i}
		{_writer.buffer}.write(loop-value)
		{_i} < size of {_code::*}
		{_writer.buffer}.write(System.lineSeparator())
	{_writer.buffer}.close()
	{_writer.file}.close()

	broadcast "{@P} &a%{_system}% System Installed &7- &b%difference between {_start} and now%"

command /vc [<text>]:
	trigger:
		player is op
		arg 1 is "목록" or "list":
			set {_s::*} to vc_getSystems()
			loop vc_getSystems():
				add 1 to {_i}
				if vc_isLoaded(loop-value) is true:
					set {_Loaded} to "&a(활성화)"
					set {_Loaded.Reverse} to "&c(비활성화)"
					set {_cmd} to "/vc_reloadSystem {@Code.Secret} false %loop-value%"
				else:
					set {_Loaded} to "&c(비활성화)"
					set {_Loaded.Reverse} to "&a(활성화)"
					set {_cmd} to "/vc_reloadSystem {@Code.Secret} true %loop-value%"
				set {_ver.cur} to vc_getCurrentVersionToString(loop-value)
				if {_ver.cur} is "0.0":
					set {_cmd} to "/vc_downloadSystem {@Code.Secret} %loop-value%"
					send formatted "{@P} &6%{_i}%. &a%loop-value%&f: <ttp:&f클릭시 시스템을 &a(다운로드)&f합니다.><cmd:%{_cmd}%>&c미설치"
					continue
				send formatted "{@P} &6%{_i}%. &a%loop-value%&f: &b%{_ver.cur}%/%vc_getVersionToString(loop-value)% <ttp:&f클릭시 시스템을 %{_Loaded.Reverse}%&f합니다.><cmd:%{_cmd}%>%{_Loaded}%"
			stop
		arg 1 is "리로드" or "reload":
			vc_reload()
			stop
		send vc_getCmdInfo()

command /vc_reloadSystem [<text>] [<boolean>] [<text>]:
	trigger:
		player is op
		arg 1 is set
		if arg 1 isn't "{@Code.Secret}":
			stop
		arg 2 is set
		arg 3 is set
		set {_system} to vc_getName(arg 3)
		if arg 2 is true:
			execute console command "/sk enable Piebin %{_system}%"
			send "{@P} &a%{_system}% &f시스템을 &a(활성화)&f했습니다."
			stop
		execute console command "/sk disable Piebin %{_system}%"
		send "{@P} &a%{_system}% &f시스템을 &c(비활성화)&f했습니다."

command /vc_downloadSystem [<text>] [<text>]:
	trigger:
		player is op
		arg 1 is set
		if arg 1 isn't "{@Code.Secret}":
			stop
		arg 2 is set
		set {_system} to vc_getName(arg 2)
		if vc_isExist({_system}) is true:
			send "{@P} &a%{_system}% &f시스템은 이미 설치되어 있습니다."
			stop
		vc_downloadFile({_system})

on load:
	wait a tick
	vc_reload()